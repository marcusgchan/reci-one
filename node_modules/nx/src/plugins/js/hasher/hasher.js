"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashTsConfig = void 0;
const tslib_1 = require("tslib");
const path_1 = require("../../../utils/path");
const fileutils_1 = require("../../../utils/fileutils");
const typescript_1 = require("../utils/typescript");
function readTsConfigJson() {
    var _a;
    var _b;
    try {
        const res = (0, fileutils_1.readJsonFile)((0, typescript_1.getRootTsConfigFileName)());
        (_a = (_b = res.compilerOptions).paths) !== null && _a !== void 0 ? _a : (_b.paths = {});
        return res;
    }
    catch (_c) {
        return {
            compilerOptions: { paths: {} },
        };
    }
}
let tsConfigJson;
function hashTsConfig(p, nxJson, { selectivelyHashTsConfig }) {
    if (!tsConfigJson) {
        tsConfigJson = readTsConfigJson();
    }
    if (selectivelyHashTsConfig) {
        return removeOtherProjectsPathRecords(p, tsConfigJson, nxJson);
    }
    else {
        return JSON.stringify(tsConfigJson);
    }
}
exports.hashTsConfig = hashTsConfig;
function removeOtherProjectsPathRecords(p, tsConfigJson, nxJson) {
    var _a;
    const _b = tsConfigJson.compilerOptions, { paths } = _b, compilerOptions = tslib_1.__rest(_b, ["paths"]);
    const rootPath = p.data.root.split('/');
    rootPath.shift();
    const pathAlias = (0, path_1.getImportPath)(nxJson === null || nxJson === void 0 ? void 0 : nxJson.npmScope, rootPath.join('/'));
    return JSON.stringify({
        compilerOptions: Object.assign(Object.assign({}, compilerOptions), { paths: {
                [pathAlias]: (_a = paths[pathAlias]) !== null && _a !== void 0 ? _a : [],
            } }),
    });
}
//# sourceMappingURL=hasher.js.map