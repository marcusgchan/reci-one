generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  recipes       Recipe[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Recipe {
  id             String                     @id @default(cuid())
  name           String
  description    String
  prepTime       Decimal?
  cookTime       Decimal?
  authorId       String                     @db.VarChar(255)
  mainImage      Image?                     @relation("mainImageToRecipe")
  parsedSiteInfo ParsedSiteInfo?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  images         Image[]                    @relation("imageToRecipe")
  ingredients    Ingredient[]
  steps          Step[]
  mealTypes      MealTypesOnRecipies[]
  cookingMethods CookingMethodsOnRecipies[]
  comments       Comment[]
  nationalities  NationalitiesOnRecipes[]
  author         User                       @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@map("recipes")
}

model ParsedSiteInfo {
  author   String
  url      String
  recipeId String @unique @db.VarChar(255)
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("parsed_sites_info")
}

model Image {
  id                  String         @id @default(cuid())
  imageToRecipeId     String?        @map("imageToRecipe") @db.VarChar(255)
  mainImageToRecipeId String?        @unique @map("mainImageToRecipe") @db.VarChar(255)
  mainImageToRecipe   Recipe?        @relation("mainImageToRecipe", fields: [mainImageToRecipeId], references: [id])
  imageToRecipe       Recipe?        @relation("imageToRecipe", fields: [imageToRecipeId], references: [id])
  urlImage            UrlImage?
  metadataImage       MetadataImage?

  @@index([mainImageToRecipeId])
  @@index([imageToRecipeId])
  @@map("images")
}

model UrlImage {
  url     String
  imageId String @unique @db.VarChar(255)
  image   Image  @relation(fields: [imageId], references: [id])

  @@map("url_images")
}

model MetadataImage {
  key     String
  type    String
  size    Int
  imageId String @unique @db.VarChar(255)
  image   Image  @relation(fields: [imageId], references: [id])

  @@map("metadata_images")
}

model Step {
  order    Int
  recipeId String  @db.VarChar(255)
  isHeader Boolean @default(false)
  name     String  @db.VarChar(1000)
  recipe   Recipe  @relation(fields: [recipeId], references: [id])

  @@id([order, recipeId])
  @@index([recipeId])
  @@map("steps")
}

model Ingredient {
  recipeId String  @db.VarChar(255)
  isHeader Boolean @default(false)
  order    Int
  name     String
  recipe   Recipe  @relation(fields: [recipeId], references: [id])

  @@id([order, recipeId])
  @@index([recipeId])
  @@map("ingredients")
}

model CookingMethod {
  id       String                     @id @default(cuid())
  name     String                     @unique @db.VarChar(255)
  recipies CookingMethodsOnRecipies[]

  @@map("cooking_methods")
}

model CookingMethodsOnRecipies {
  cookingMethodId String
  recipeId        String
  cookingMethod   CookingMethod @relation(fields: [cookingMethodId], references: [id])
  Recipe          Recipe        @relation(fields: [recipeId], references: [id])

  @@id([cookingMethodId, recipeId])
  @@index([recipeId])
  @@index([cookingMethodId])
  @@map("cooking_methods_on_recipies")
}

model Comment {
  id          String   @id @default(cuid())
  dateCreated DateTime @default(now())
  rating      Decimal
  authorId    String   @db.VarChar(255)
  recipeId    String   @db.VarChar(255)
  description String   @db.VarChar(1000)
  author      User     @relation(fields: [authorId], references: [id])
  recipe      Recipe   @relation(fields: [recipeId], references: [id])

  @@index([recipeId])
  @@index([authorId])
  @@map("comments")
}

model MealTypesOnRecipies {
  mealTypeId String
  recipeId   String
  mealType   MealType @relation(fields: [mealTypeId], references: [id])
  recipe     Recipe   @relation(fields: [recipeId], references: [id])

  @@id([mealTypeId, recipeId])
  @@index([mealTypeId])
  @@index([recipeId])
  @@map("meal_types_on_recipies")
}

model MealType {
  id       String                @id @default(cuid())
  name     String                @unique
  recipies MealTypesOnRecipies[]

  @@map("meal_types")
}

model Nationality {
  id       String                   @id @default(cuid())
  name     String                   @unique
  recipies NationalitiesOnRecipes[]

  @@map("nationalities")
}

model NationalitiesOnRecipes {
  nationalityId String
  recipeId      String
  nationality   Nationality @relation(fields: [nationalityId], references: [id])
  recipe        Recipe      @relation(fields: [recipeId], references: [id])

  @@id([nationalityId, recipeId])
  @@index([nationalityId])
  @@index([recipeId])
  @@map("nationalities_on_recipies")
}
