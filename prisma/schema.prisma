// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql" // NOTE: sqlite does not work with NextAuth.js
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  recipes       Recipe[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Recipe {
  id          String  @id @default(cuid())
  name        String
  description String
  prepTime    Decimal
  cookTime    Decimal

  ingredients    Ingredient[]
  steps          Step[]
  mealType       MealType
  cookingMethods CookingMethod[]
  utensils       Utensil[]
  images         Image[]
  recipe         Comment[]
  nationalities  Nationality[]

  authorId String @db.VarChar(255)
  author   User   @relation(fields: [authorId], references: [id])

  @@map("recipies")
}

model Step {
  id          Int    @id @default(autoincrement())
  order       Int
  description String @db.VarChar(1000)

  recipeId String @db.VarChar(255)
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("steps")
}

model Ingredient {
  id          String            @id @default(cuid())
  name        String
  unit        UnitOfMeasurement
  measurement Decimal

  recipeId String @db.VarChar(255)
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("ingredients")
}

model CookingMethod {
  id     String @id @default(cuid())
  method String @db.VarChar(255)

  recipeId String @db.VarChar(255)
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("cooking_methods")
}

model Utensil {
  id String @id @default(cuid())

  recipeId String @db.VarChar(255)
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("utensils")
}

model Comment {
  id          String   @id @default(cuid())
  comment     String   @db.VarChar(1000)
  dateCreated DateTime @default(now())
  rating      Decimal

  authorId String @db.VarChar(255)
  author   User   @relation(fields: [authorId], references: [id])

  recipeId String @db.VarChar(255)
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("comments")
}

model Image {
  id   String @id @default(cuid())
  link String @db.VarChar(255)

  recipeId String @db.VarChar(255)
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("images")
}

model Nationality {
  id          String @id @default(cuid())
  nationality String @db.VarChar(255)

  recipeId String @db.VarChar(255)
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@map("nationalities")
}

enum UnitOfMeasurement {
  Imperial
  Metric
  None
}

enum MealType {
  Appetizer
  Main
  Side
  Snack
  Dessert
  Beverage
}
